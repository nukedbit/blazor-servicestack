@page "/fetchdata"
@using MyApp.ServiceModel
@using MyApp.ServiceModel.Types
@using ServiceStack
@*@attribute [Authorize(Roles = "Admin")]*@

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="Reload">Reload</button>
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> forecasts = new List<WeatherForecast>();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState {get;set;}

    protected override async Task OnInitializedAsync()
    {  
        forecasts = await this.GetServiceGateway().SendAsync<List<WeatherForecast>>(new GetWeatherForecast()
        {
            StartDate = DateTime.Now
        });
    }


    public async void Reload()
    {
        var request = HostContext.AppHost.TryGetCurrentRequest();
        var session = await request.GetSessionAsync();
        forecasts = await this.GetServiceGateway(request).SendAsync(new GetWeatherForecast()
        {
            StartDate = DateTime.Now
        });
    }

}