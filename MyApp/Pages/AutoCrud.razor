@page "/autocrud"
@using MyApp.ServiceModel
@using MyApp.ServiceModel.Types
@using ServiceStack
@attribute [Authorize(Roles = "Admin")]

<h1>Logged Clicks</h1>

<p>Use auto crud for getting and creating records.</p>

@if (records == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <button class="btn btn-primary mb-3 mr-3" @onclick="AddNew">Add New</button>
    <button class="btn btn-primary mb-3 mr-3" @onclick="AddNewWithFakeRole">Try Add require fake role</button>
     <button class="btn btn-primary mb-3" @onclick="ClearLogs">Clear Logs</button>
@if (!String.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
      @ErrorMessage
    </div>
}
    <table class="table">
        <thead>
        <tr>
            <th>CreatedDate</th>
            <th>CreatedBy</th>
            <th>ModifiedDate</th>
            <th>ModifiedBy</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var record in records)
        {
            <tr>
                <td>@record.CreatedDate.ToShortDateString()</td>
                <td>@record.CreatedBy</td>
                <td>@record.ModifiedDate.ToShortDateString()</td>
                <td>@record.ModifiedBy</td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private List<LogClick> records = new List<LogClick>();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState {get;set;}

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = null;
            var response = await this.GetServiceStackClient(await AuthenticationState).PostAsync(new QueryLogClicks());
            records = response.Results;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.ToString();
        }
    }


    public async void AddNew()
    {
        try
        {
            ErrorMessage = null;

            await this.GetServiceStackClient(await AuthenticationState).PostAsync(new CreateLogClick());

            var response = await this.GetServiceStackClient(await AuthenticationState).GetAsync(new QueryLogClicks());
            records = response.Results;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.ToString();
        }
    }

    public async void AddNewWithFakeRole()
    {
        try
        {
            ErrorMessage = null;
            await this.GetServiceStackClient(await AuthenticationState).PostAsync(new CreateLogClickRequireFakeRole());

            var response = await this.GetServiceStackClient(await AuthenticationState).GetAsync(new QueryLogClicks());
            records = response.Results;
        }catch(Exception ex)
        {
            ErrorMessage = ex.ToString();
        }
    }

    public async void ClearLogs()
    {
        try
        {
            ErrorMessage = null;
            await this.GetServiceStackClient(await AuthenticationState).DeleteAsync(new ClearAllLogClick());

            var response = await this.GetServiceStackClient(await AuthenticationState).GetAsync(new QueryLogClicks());
            records = response.Results;
        }catch(Exception ex)
        {
            ErrorMessage = ex.ToString();
        }
    }

}